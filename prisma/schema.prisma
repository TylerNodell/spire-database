generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["connectOrCreate"]
}

// !!ConnectOrCreate is experimental!!

/// SQLite db
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Owner Table
model Owner {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  name      String // Owner Name
  address   String // Owner Address
  phone     String?  @unique // Owner Phone Number
  email     String?  @unique // Owner Email
  units     Unit[] // List of all Owner owned Units
  notes String? // Additional Information
}

// Tenant Table
model Tenant {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  name      String  // Tenant Name
  address   String  // Tenant Mailing Address
  phone     String?  @unique // Tenant Phone Number
  email     String?  @unique // Tenant Email
  unit      Unit?    @relation(fields: [unitId], references: [id]) // Unit with the Tenant is related to.
  unitId    Int?  // Unit Identifier
  notes String? // Additional Information
}

// Agent Table
model Agent {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  name      String  
  email     String   @unique  
  password  String
  phone     String   @unique
  altPhone  String
  units     Unit[]
}

// Building Table
model Building {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  address   String
  name      String?
  phone String
  email String
  units     Unit[]
  notes String  
  insurance String 
  boardPackages String
  salesapplication String
  salesPackage String
  specialDocuments String
}

// Unit Table
model Unit {
  id            Int         @default(autoincrement()) @id
  createdAt     DateTime    @default(now())
  buildingId    Int
  apt           String
  sale          Boolean
  agent         Agent[]
  building      Building    @relation(fields: [buildingId], references: [id])
  owner         Owner[]
  tenant        Tenant[]
  lease         Lease
  pets          Boolean?
  dogBreed      String?
  storageL      Boolean? // Storage Locker
  storageB      Boolean? // Bike Storage
  advertisement String // Folder on s3 with all advertisement materials
  occupants     Occupant[]
  floorplan     String?
  sqft          Float?
  purchasePrice Float?
  insurance     String?
  tenantInsurance String?
}

// Occupant Table
model Occupant {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  name      String
  email     String
  phone     String
  unit      Unit     @relation(fields: [unitId], references: [id])
  unitId    Int
}

// Lease Table
model Lease {
  id               Int       @default(autoincrement()) @id
  createdAt        DateTime  @default(now())
  unit             Unit      @relation(fields: [unitId], references: [id])
  unitId           Int
  term             DateTime?
  amount           Float?
  extension        String?
  notice           Int?
  showDate         DateTime
  security         String
  pdfLeaseSigned   String?
  pdfLeaseUnsigned String?
  wordRider        String?
}

model SalesListing {
  id               Int       @default(autoincrement()) @id
  createdAt        DateTime  @default(now())
}

model ServiceHistory {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
}

model ServiceCompany {
  id               Int       @default(autoincrement()) @id
  createdAt        DateTime  @default(now())
}